import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { Download, Share2, RotateCcw, Calendar, User, Clock } from 'lucide-react';
import { format } from 'date-fns';
import { PDFService } from '@/services/pdfService';
import { toast } from '@/hooks/use-toast';
import { useAuth } from '@/hooks/useAuth';
import { useNavigate } from 'react-router-dom';

interface ChatSummaryScreenProps {
  chatId: string;
  answers: any;
}

export const ChatSummaryScreen: React.FC<ChatSummaryScreenProps> = ({ 
  chatId, 
  answers 
}) => {
  const { user } = useAuth();
  const navigate = useNavigate();
  const [isGeneratingPDF, setIsGeneratingPDF] = useState(false);

  const currentDate = new Date();

  const getUrgencyLevel = () => {
    const severity = answers.severity;
    if (severity && severity.includes('8') || severity?.includes('9') || severity?.includes('10')) {
      return { level: 'High', color: 'destructive' as const };
    } else if (severity && (severity.includes('5') || severity.includes('6') || severity.includes('7'))) {
      return { level: 'Medium', color: 'secondary' as const };
    }
    return { level: 'Low', color: 'default' as const };
  };

  const generatePDF = async () => {
    if (!user) return;

    setIsGeneratingPDF(true);
    try {
      const healthReportData = {
        patientName: user.email || 'Patient',
        patientAge: answers.age || 'Not specified',
        patientGender: answers.gender || 'Not specified',
        date: format(currentDate, 'PPP'),
        dateGenerated: format(currentDate, 'PPP'),
        symptoms: [
          answers.mainSymptom || 'Not specified',
          answers.additionalSymptoms || 'None specified'
        ].filter(Boolean),
        aiAssessment: `Health consultation completed on ${format(currentDate, 'PPP')}. Primary concern: ${answers.mainSymptom || 'Not specified'}. Duration: ${answers.duration || 'Not specified'}. Severity: ${answers.severity || 'Not specified'}.`,
        assessment: `Health consultation completed on ${format(currentDate, 'PPP')}. Primary concern: ${answers.mainSymptom || 'Not specified'}. Duration: ${answers.duration || 'Not specified'}. Severity: ${answers.severity || 'Not specified'}.`,
        recommendations: [
          'Consult with a qualified healthcare professional for proper diagnosis',
          'Share this summary with your doctor during your appointment',
          'Monitor your symptoms and seek immediate care if they worsen',
          'Follow up as recommended by your healthcare provider'
        ],
        urgencyLevel: getUrgencyLevel().level,
        disclaimer: 'This summary is generated by Doctori AI for informational purposes only. It is not a medical diagnosis or treatment recommendation. Please consult with a qualified healthcare professional for proper medical evaluation.'
      };

      const { blob, filename } = await PDFService.generateHealthReport(healthReportData);
      
      // Create download link
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = filename;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);

      toast({
        title: "PDF Generated",
        description: "Your health summary has been downloaded successfully.",
      });
    } catch (error) {
      console.error('Error generating PDF:', error);
      toast({
        title: "Error",
        description: "Failed to generate PDF. Please try again.",
        variant: "destructive"
      });
    } finally {
      setIsGeneratingPDF(false);
    }
  };

  const handleShare = async () => {
    if (navigator.share) {
      try {
        await navigator.share({
          title: 'Health Consultation Summary',
          text: `Health consultation completed on ${format(currentDate, 'PPP')}`,
          url: window.location.href
        });
      } catch (error) {
        console.error('Error sharing:', error);
      }
    } else {
      // Fallback: copy to clipboard
      navigator.clipboard.writeText(window.location.href);
      toast({
        title: "Link Copied",
        description: "Summary link copied to clipboard.",
      });
    }
  };

  const startNewChat = () => {
    navigate('/chat');
    window.location.reload();
  };

  const urgency = getUrgencyLevel();

  return (
    <div className="min-h-screen bg-gradient-to-br from-primary/5 to-secondary/5 p-4">
      <div className="max-w-3xl mx-auto space-y-6">
        {/* Header */}
        <Card className="shadow-lg">
          <CardHeader className="text-center">
            <CardTitle className="text-2xl font-bold text-primary">
              Health Consultation Summary
            </CardTitle>
            <div className="flex items-center justify-center gap-4 text-sm text-muted-foreground">
              <div className="flex items-center gap-1">
                <Calendar className="h-4 w-4" />
                {format(currentDate, 'PPP')}
              </div>
              <div className="flex items-center gap-1">
                <Clock className="h-4 w-4" />
                {format(currentDate, 'p')}
              </div>
            </div>
          </CardHeader>
        </Card>

        {/* Patient Information */}
        <Card className="shadow-lg">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <User className="h-5 w-5" />
              Patient Information
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-3">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="text-sm font-medium text-muted-foreground">Age</label>
                <p className="text-lg font-semibold">{answers.age || 'Not specified'}</p>
              </div>
              <div>
                <label className="text-sm font-medium text-muted-foreground">Gender</label>
                <p className="text-lg font-semibold capitalize">
                  {answers.gender?.replace('_', ' ') || 'Not specified'}
                </p>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Urgency Alert */}
        <Card className="shadow-lg">
          <CardContent className="pt-6">
            <div className="flex items-center justify-between">
              <span className="font-medium">Assessment Priority:</span>
              <Badge variant={urgency.color} className="text-sm">
                {urgency.level} Priority
              </Badge>
            </div>
          </CardContent>
        </Card>

        {/* Symptoms & Responses */}
        <Card className="shadow-lg">
          <CardHeader>
            <CardTitle>Health Information</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <label className="text-sm font-medium text-muted-foreground">Main Concern</label>
              <p className="mt-1 p-3 bg-muted/50 rounded-lg">
                {answers.mainSymptom || 'Not specified'}
              </p>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="text-sm font-medium text-muted-foreground">Duration</label>
                <p className="mt-1 font-semibold">{answers.duration || 'Not specified'}</p>
              </div>
              <div>
                <label className="text-sm font-medium text-muted-foreground">Severity</label>
                <p className="mt-1 font-semibold">{answers.severity || 'Not specified'}</p>
              </div>
            </div>

            {answers.additionalSymptoms && (
              <div>
                <label className="text-sm font-medium text-muted-foreground">Additional Symptoms</label>
                <p className="mt-1 p-3 bg-muted/50 rounded-lg">
                  {answers.additionalSymptoms}
                </p>
              </div>
            )}

            {answers.medications && (
              <div>
                <label className="text-sm font-medium text-muted-foreground">Current Medications</label>
                <p className="mt-1 p-3 bg-muted/50 rounded-lg">
                  {answers.medications}
                </p>
              </div>
            )}

            {answers.allergies && (
              <div>
                <label className="text-sm font-medium text-muted-foreground">Known Allergies</label>
                <p className="mt-1 p-3 bg-muted/50 rounded-lg">
                  {answers.allergies}
                </p>
              </div>
            )}
          </CardContent>
        </Card>

        {/* Recommendations */}
        <Card className="shadow-lg">
          <CardHeader>
            <CardTitle>Next Steps</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              <div className="flex items-start gap-3">
                <div className="w-2 h-2 bg-primary rounded-full mt-2 flex-shrink-0" />
                <p>Consult with a qualified healthcare professional for proper diagnosis and treatment</p>
              </div>
              <div className="flex items-start gap-3">
                <div className="w-2 h-2 bg-primary rounded-full mt-2 flex-shrink-0" />
                <p>Share this summary with your doctor during your appointment</p>
              </div>
              <div className="flex items-start gap-3">
                <div className="w-2 h-2 bg-primary rounded-full mt-2 flex-shrink-0" />
                <p>Monitor your symptoms and seek immediate care if they worsen</p>
              </div>
              <div className="flex items-start gap-3">
                <div className="w-2 h-2 bg-primary rounded-full mt-2 flex-shrink-0" />
                <p>Consider booking an appointment through our Find Doctors section</p>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Action Buttons */}
        <Card className="shadow-lg">
          <CardContent className="pt-6">
            <div className="flex flex-col sm:flex-row gap-3">
              <Button
                onClick={generatePDF}
                disabled={isGeneratingPDF}
                className="flex items-center gap-2 flex-1"
              >
                <Download className="h-4 w-4" />
                {isGeneratingPDF ? 'Generating PDF...' : 'Download PDF Summary'}
              </Button>
              
              <Button
                variant="outline"
                onClick={handleShare}
                className="flex items-center gap-2"
              >
                <Share2 className="h-4 w-4" />
                Share
              </Button>
              
              <Button
                variant="outline"
                onClick={startNewChat}
                className="flex items-center gap-2"
              >
                <RotateCcw className="h-4 w-4" />
                New Chat
              </Button>
            </div>
          </CardContent>
        </Card>

        {/* Medical Disclaimer */}
        <Card className="shadow-lg border-yellow-200 bg-yellow-50">
          <CardContent className="pt-6">
            <p className="text-sm text-yellow-800">
              <strong>Medical Disclaimer:</strong> This summary is generated by Doctori AI for informational purposes only. 
              It is not a medical diagnosis or treatment recommendation. Please consult with a qualified healthcare 
              professional for proper medical evaluation and treatment decisions.
            </p>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};